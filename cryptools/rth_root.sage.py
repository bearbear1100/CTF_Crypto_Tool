
# This file was *autogenerated* from the file rth_root.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0)
def rth_root(r,c,q):
	F = GF(q)
	R = PolynomialRing(F,'x', names=('x',)); (x,) = R._first_ngens(1)
	while _sage_const_1 :
		coeff = []
		fx = x**r
		for i in range(_sage_const_1 ,r) :
			fx -= F.random_element()*(x**(r-i))
		fx += ((-_sage_const_1 )**r)*c
		fc = list(factor(fx))
		if len(fc) <= _sage_const_1 :
			power = _sage_const_0 
			for i in range(r) :
				power += q**i
			root = pow(x, power/r , fx)
			root %= x
			return int(root)

def get_phi(N):
	phi = N
	for f in factor(N):
		phi = phi * (_sage_const_1  - _sage_const_1  / f[_sage_const_0 ])
	return phi

def get_roots(r,c,mod):
	rems = []
	if gcd( get_phi(mod), r) == _sage_const_1 :
		d = inverse_mod( r,get_phi(mod) )
		rems.append( int(pow(c, d, mod)))
	else:
		g = GF(mod).multiplicative_generator()
		u = int(g ** ((mod-_sage_const_1 )/r))
		r1 = int(rth_root(r,c, mod))
		for i in xrange(r):
			rems.append( int(r1 * pow(u, i, mod) % mod) )
	print(rems)


if __name__ == '__main__':

    import sys

    c = int(sys.argv[_sage_const_1 ])
    p = int(sys.argv[_sage_const_2 ])
    root = int(sys.argv[_sage_const_3 ])

    print(get_roots(root,c,p))

