
# This file was *autogenerated* from the file cube_root.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1)
import sys

def cube_root(c, q):
    F = FiniteField(q)
    R = PolynomialRing(F,'x', names=('x',)); (x,) = R._first_ngens(1)
    while _sage_const_1 :
        a = F.random_element()
        b = F.random_element()
        fx = x**_sage_const_3  - a*x**_sage_const_2  + b*x - c
        fc = list(factor(fx))
        if len(fc) <= _sage_const_1 :
            root = pow(x, (q**_sage_const_2 +q+_sage_const_1 )/_sage_const_3 , fx)
            root %= x
            return int(root)

def cube_roots(c,mod):
    rems = []
    if gcd( (mod-_sage_const_1 ), _sage_const_3 ) == _sage_const_1 :
        d = inverse_mod(_sage_const_3 , mod - _sage_const_1 )
        rems.append( int(pow(c, d, mod)) )
    else:
        g = GF(mod).multiplicative_generator()
        u = int(g ** ((mod-_sage_const_1 )/_sage_const_3 ))
        r1 = int(cube_root(c, mod))
        for i in xrange(_sage_const_3 ):
            rems.append( int(r1 * pow(u, i, mod) % mod) )
    print(rems)

if __name__ == '__main__':
    import sys

    c = int(sys.argv[_sage_const_1 ])
    p = int(sys.argv[_sage_const_2 ])
    
    print(cube_roots(c%p,p))

