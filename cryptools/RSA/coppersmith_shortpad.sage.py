
# This file was *autogenerated* from the file coppersmith_shortpad.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_4 = Integer(4); _sage_const_40 = Integer(40); _sage_const_0p3 = RealNumber('0.3'); _sage_const_32 = Integer(32)
import sys
from sage.all import *
 
n = int(sys.argv[_sage_const_1 ])
e = int(sys.argv[_sage_const_2 ])
c1 = int(sys.argv[_sage_const_3 ])
c2 = int(sys.argv[_sage_const_4 ])

PRxy = PolynomialRing(Zmod(n), names=('x', 'y',)); (x, y,) = PRxy._first_ngens(2)
PRx = PolynomialRing(Zmod(n), names=('xn',)); (xn,) = PRx._first_ngens(1)
PRZZ = PolynomialRing(Zmod(n), names=('xz', 'yz',)); (xz, yz,) = PRZZ._first_ngens(2)
 
g1 = x**e - c1
g2 = (x + y)**e - c2
 
q1 = g1.change_ring(PRZZ)
q2 = g2.change_ring(PRZZ)
 
h = q2.resultant(q1)

# Need to switch to univariate polynomial ring because .small_roots is implemented only for univariate
h = h.univariate_polynomial() # x is hopefully eliminated
h = h.change_ring(PRx).subs(y=xn)
h = h.monic()
 
roots = h.small_roots(X=_sage_const_2 **_sage_const_40 , beta=_sage_const_0p3 )
assert roots, "Failed1"
 
diff = roots[_sage_const_0 ]
if diff > _sage_const_2 **_sage_const_32 :
    diff = -diff
    c1, c2 = c2, c1

print(diff)

