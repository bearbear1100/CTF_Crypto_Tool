from Crypto.Util.number import getPrime
from cryptools.stuff import *
from cryptools.modular import *
import os
import math
# Adapted from Hack.lu 2014 CTF

def WienerVulnerability(size):
    while True:
        p = getPrime(size // 2)
        q = getPrime(size // 2)
        if q < p < 2*q:   
            break
    N = p * q
    phi_N = (p - 1) * (q - 1)
   
    # Recall that: d < (N^(0.25))/3
    max_d = math.ceil( nroot(nroot(N,2),2)/ 3  )
    max_d_bits = max_d.bit_length() - 1

    while True:
        d = randint_bits(max_d_bits)
        try:
            e = int(invmod(d, phi_N))
        except ValueError:
            continue
        if (e * d) % phi_N == 1:
            break

    # Testing
    msg = (N - 123) >> 10
    c = pow(msg, e, N) 
    assert pow(c, d, N) ==  msg, "Key generate fail."

    return  N, e, d, p, q
